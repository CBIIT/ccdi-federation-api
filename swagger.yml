openapi: 3.0.3
info:
  title: CCDI Pediatric Cancer Data Catalog
  description: |-
    The CCDI Pediatric Cancer Data Catalog is an API that supports the querying
    of federated pediatric cancer within the broader community. The goal of the
    API is to support identification of pediatric cancer samples of interest via
    a variety of query parameters.
  contact:
    name: Childhood Cancer Data Initiative support email
    email: NCIChildhoodCancerDataInitiative@mail.nih.gov
  version: '0.3'
servers:
- url: https://ccdi.stjude.cloud/api/v0
  description: St. Jude Children's Research Hospital CCDI API server
- url: https://ccdifederation.pedscommons.org/api/v0
  description: Pediatric Cancer Data Commons CCDI API server
- url: https://ccdi.treehouse.gi.ucsc.edu/api/v0
  description: UCSC Treehouse CCDI API server
- url: https://ccdi.kidsfirstdrc.org/api/v0
  description: KidsFirst CCDI API server
paths:
  /subject:
    get:
      tags:
      - Subject
      summary: Gets the subjects known by this server.
      description: |-
        Gets the subjects known by this server.

        This endpoint supports pagination. Pagination is enabled by providing one of
        the pagination-related query parameters below.

        **Note:** please read the provided details on default sort order within the
        `responses::Subjects` schema, as that is a requirement of this endpoint.
      operationId: subject_index
      parameters:
      - name: page
        in: query
        description: |-
          The page to retrieve.

          This is a 1-based index of a page within a page set. The value of `page`
          **must** default to `1` when pagination is enabled but this parameter is
          not provided. Pagination is enabled if this parameter is provided to the
          endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      - name: per_page
        in: query
        description: |-
          The number of results per page.

          Each server can select its own default value for `per_page` if
          pagination is enabled but this parameter is not provided. A default
          value of `100` is recommended if all values are equally reasonable.
          Pagination is enabled if this parameter is provided to the endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successful operation.
          headers:
            link:
              schema:
                type: string
              description: "Links to URLs that may be of interesting when paging through paginated responses. This header contains two or more links of interest. The format of the field is as follows: \n\n`Link: <URL>; rel=\"REL\"` \n### Relationships\n\nIn the format above, `URL` represents a valid URL for the link of interest and `REL` is one of four values: \n- `first` (_Required_). A link to the first page in the results (can be the same as `last` if there is only one page).\n- `last` (_Required_). A link to the first page in the results (can be the same as `first` if there is only one page).\n- `next` (_Optional_). A link to the next page (if it exists).\n- `prev` (_Optional_). A link to the previous page (if it exists).\n\n### Requirements\n\n- This header is required to exist when pagination is enabled.\n- It is also required _not_ to exist when pagination is not enabled.\n- When the header is present, this header must provide links for at least the `first` and `last` rels.\n - The `prev` and `next` and next header must exist only (a) when there are multiple pages in the result page set and (b) when the current page is not the first and last page respectively.\n- This list of links is unordered.\n\n ### Notes\n\n- HTTP 1.1 and HTTP 2.0 dictate that response headers are case insensitive. Though not required, we recommend an all lowercase name of `link` for this response header."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Subjects'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Subjects
                  message: Subjects not found.
        '422':
          description: Invalid query or path parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: InvalidParameters
                  parameters:
                  - page
                  - per_page
                  reason: Unable to calculate offset.
                  message: 'Invalid value for parameters ''page'' and ''per_page'': unable to calculate offset.'
  /subject/{namespace}/{name}:
    get:
      tags:
      - Subject
      summary: Gets the subject matching the provided id (if the subject exists).
      description: Gets the subject matching the provided id (if the subject exists).
      operationId: subject_show
      parameters:
      - name: namespace
        in: path
        description: The namespace portion of the subject identifier.
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: The name portion of the subject identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Subject'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Subjects
                  message: Subjects not found.
  /subject/by/{field}/count:
    get:
      tags:
      - Subject
      summary: Groups the subjects by the specified metadata field and returns counts.
      description: Groups the subjects by the specified metadata field and returns counts.
      operationId: subjects_by_count
      parameters:
      - name: field
        in: path
        description: The field to group by and count.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.by.count.Subjects'
        '422':
          description: Unsupported field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: UnsupportedField
                  field: handedness
                  reason: This field is not present for subjects.
                  message: 'Field ''handedness'' is not supported: this field is not present for subjects.'
  /subject/summary:
    get:
      tags:
      - Subject
      summary: Reports summary information for the subjects known by this server.
      description: Reports summary information for the subjects known by this server.
      operationId: subject_summary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Summary'
  /sample:
    get:
      tags:
      - Sample
      summary: Gets the samples known by this server.
      description: |-
        Gets the samples known by this server.

        This endpoint supports pagination. Pagination is enabled by providing one of
        the pagination-related query parameters below.

        **Note:** please read the provided details on default sort order within the
        `responses::Samples` schema, as that is a requirement of this endpoint.
      operationId: sample_index
      parameters:
      - name: page
        in: query
        description: |-
          The page to retrieve.

          This is a 1-based index of a page within a page set. The value of `page`
          **must** default to `1` when pagination is enabled but this parameter is
          not provided. Pagination is enabled if this parameter is provided to the
          endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      - name: per_page
        in: query
        description: |-
          The number of results per page.

          Each server can select its own default value for `per_page` if
          pagination is enabled but this parameter is not provided. A default
          value of `100` is recommended if all values are equally reasonable.
          Pagination is enabled if this parameter is provided to the endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successful operation.
          headers:
            link:
              schema:
                type: string
              description: "Links to URLs that may be of interesting when paging through paginated responses. This header contains two or more links of interest. The format of the field is as follows: \n\n`Link: <URL>; rel=\"REL\"` \n### Relationships\n\nIn the format above, `URL` represents a valid URL for the link of interest and `REL` is one of four values: \n- `first` (_Required_). A link to the first page in the results (can be the same as `last` if there is only one page).\n- `last` (_Required_). A link to the first page in the results (can be the same as `first` if there is only one page).\n- `next` (_Optional_). A link to the next page (if it exists).\n- `prev` (_Optional_). A link to the previous page (if it exists).\n\n### Requirements\n\n- This header is required to exist when pagination is enabled.\n- It is also required _not_ to exist when pagination is not enabled.\n- When the header is present, this header must provide links for at least the `first` and `last` rels.\n - When the header is present, the `prev` and `next` links must exist only (a) when there are multiple pages in the result page set and (b) when the current page is not the first and last page respectively.\n- This list of links is unordered.\n\n ### Notes\n\n- HTTP 1.1 and HTTP 2.0 dictate that response headers are case insensitive. Though not required, we recommend an all lowercase name of `link` for this response header."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Samples'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Samples
                  message: Samples not found.
        '422':
          description: Invalid query or path parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: InvalidParameters
                  parameters:
                  - page
                  - per_page
                  reason: Unable to calculate offset.
                  message: 'Invalid value for parameters ''page'' and ''per_page'': unable to calculate offset.'
  /sample/{namespace}/{name}:
    get:
      tags:
      - Sample
      summary: Gets the sample matching the provided name (if the sample exists).
      description: Gets the sample matching the provided name (if the sample exists).
      operationId: sample_show
      parameters:
      - name: namespace
        in: path
        description: The namespace portion of the sample identifier.
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: The name portion of the sample identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Sample'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Sample with namespace 'foo' and name 'bar'
                  message: Sample with namespace 'foo' and name 'bar' not found.
  /sample/by/{field}/count:
    get:
      tags:
      - Sample
      summary: Groups the samples by the specified metadata field and returns counts.
      description: Groups the samples by the specified metadata field and returns counts.
      operationId: samples_by_count
      parameters:
      - name: field
        in: path
        description: The field to group by and count.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.by.count.Samples'
        '422':
          description: Unsupported field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: UnsupportedField
                  field: handedness
                  reason: This field is not present for samples.
                  message: 'Field ''handedness'' is not supported: this field is not present for samples.'
  /sample/summary:
    get:
      tags:
      - Sample
      summary: Reports summary information for the samples known by this server.
      description: Reports summary information for the samples known by this server.
      operationId: sample_summary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Summary'
  /metadata/fields/subject:
    get:
      tags:
      - Metadata
      summary: Gets the metadata fields for subjects that are supported by this server.
      description: Gets the metadata fields for subjects that are supported by this server.
      operationId: metadata_fields_subject
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.metadata.FieldDescriptions'
  /metadata/fields/sample:
    get:
      tags:
      - Metadata
      summary: Gets the metadata fields for samples that are supported by this server.
      description: Gets the metadata fields for samples that are supported by this server.
      operationId: metadata_fields_sample
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.metadata.FieldDescriptions'
components:
  schemas:
    cde.v1.sample.DiseasePhase:
      type: string
      description: |-
        **`caDSR CDE 12217251 v1.00`**

        This metadata element is defined by the caDSR as "The stage or period of an
        individual's treatment process during which relevant observations were
        recorded.".

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=12217251%20and%20ver_nr=1>
      enum:
      - Post-Mortem
      - Not Reported
      - Unknown
      - Initial Diagnosis
      - Progression
      - Refractory
      - Relapse
      - Relapse/Progression
    cde.v1.sample.TumorClassification:
      type: string
      description: |-
        **`caDSR CDE 12922545 v1.00`**

        This metadata element is defined by the caDSR as "The classification of a
        tumor based primarily on histopathological characteristics.".

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=12922545%20and%20ver_nr=1>
      enum:
      - Metastatic
      - Not Reported
      - Primary
      - Regional
      - Unknown
    cde.v1.subject.Identifier:
      type: object
      description: |-
        **`caDSR CDE 6380049 v1.00`**

        This metadata element is defined by the caDSR as "A unique subject
        identifier within a site and a study.". No permissible values are defined
        for this CDE.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=6380049%20and%20ver_nr=1>
      required:
      - namespace
      - name
      properties:
        namespace:
          type: string
          description: The namespace of the identifier.
          example: organization
        name:
          type: string
          description: The name of the identifier.
          example: SubjectName001
    cde.v1.subject.Race:
      type: string
      description: |-
        **`caDSR CDE 2192199 v1.00`**

        This metadata element is defined by the caDSR as "The text for reporting
        information about race based on the Office of Management and Budget (OMB)
        categories.". Upon examination of the large number of projects using the
        term, it appears to be the preferred term for the general concept of race.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=2192199%20and%20ver_nr=1>
      enum:
      - Not allowed to collect
      - Native Hawaiian or other Pacific Islander
      - Not Reported
      - Unknown
      - American Indian or Alaska Native
      - Asian
      - Black or African American
      - White
    cde.v1.subject.Sex:
      type: string
      description: |-
        **`caDSR CDE 6343385 v1.00`**

        This metadata element is defined by the caDSR as "Sex of the subject as
        determined by the investigator." In particular, this field does not dictate
        the time period: whether it represents sex at birth, sex at sample
        collection, or any other determined time point. Further, the descriptions
        for F and M suggest that this term can represent either biological sex,
        cultural gender roles, or both. Thus, this field cannot be assumed to
        strictly represent biological sex.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=6343385%20and%20ver_nr=1>
      enum:
      - U
      - F
      - M
      - UNDIFFERENTIATED
    cde.v2.sample.TissueType:
      type: string
      description: |-
        **`caDSR CDE 5432687 v2.00`**

        This metadata element is defined by the caDSR as "Text term that represents
        a description of the kind of tissue collected with respect to disease status
        or proximity to tumor tissue."

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=5432687%20and%20ver_nr=2>
      enum:
      - Not Reported
      - Abnormal
      - Normal
      - Peritumoral
      - Tumor
      - Non-neoplastic
      - Unavailable
      - Unknown
      - Unspecified
    cde.v2.subject.Ethnicity:
      type: string
      description: |-
        **`caDSR CDE 2192217 v2.00`**

        This metadata element is defined by the caDSR as "The text for reporting
        information about ethnicity based on the Office of Management and Budget
        (OMB) categories." Upon examination of the large number of projects using
        the term, it appears to be the preferred term for the general concept of
        ethnicity.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=2192217%20and%20ver_nr=2>
      enum:
      - Not allowed to collect
      - Hispanic or Latino
      - Not Hispanic or Latino
      - Unknown
      - Not reported
    field.UnharmonizedField:
      oneOf:
      - $ref: '#/components/schemas/field.owned.Field'
      - $ref: '#/components/schemas/field.unowned.Field'
      description: A metadata field.
    field.owned.Field:
      type: object
      required:
      - value
      properties:
        value:
          description: The value of the metadata field.
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
        owned:
          type: boolean
          description: Whether or not the field is owned by the source server.
    field.owned.subject.Identifier:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.subject.Identifier'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
        owned:
          type: boolean
          description: Whether or not the field is owned by the source server.
    field.unowned.Field:
      type: object
      required:
      - value
      properties:
        value:
          description: The value of the metadata field.
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.sample.DiseasePhase:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.sample.DiseasePhase'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.sample.TissueType:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v2.sample.TissueType'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.sample.TumorClassification:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.sample.TumorClassification'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.subject.Ethnicity:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v2.subject.Ethnicity'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.subject.Race:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.subject.Race'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.subject.Sex:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.subject.Sex'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    fields.Unharmonized:
      allOf:
      - type: object
        description: The inner [`IndexMap`].
        additionalProperties:
          $ref: '#/components/schemas/field.UnharmonizedField'
      - type: object
      description: |-
        A map of unharmonized metadata fields.

        Unharmonized keys may be any valid JSON string.
    models.Sample:
      type: object
      description: A sample.
      required:
      - id
      properties:
        id:
          $ref: '#/components/schemas/models.sample.Identifier'
        metadata:
          allOf:
          - $ref: '#/components/schemas/models.sample.Metadata'
          nullable: true
    models.Subject:
      type: object
      description: A subject.
      required:
      - id
      - name
      - kind
      properties:
        id:
          $ref: '#/components/schemas/cde.v1.subject.Identifier'
        name:
          type: string
          description: |-
            The primary name for a subject used within the source server.

            Note that this field is not namespaced like an `identifier` is, and,
            instead, is intended to represent a colloquial or display name for the
            sample (without indicating the scope of the name).
          example: SubjectName001
        kind:
          $ref: '#/components/schemas/models.subject.Kind'
        metadata:
          allOf:
          - $ref: '#/components/schemas/models.subject.Metadata'
          nullable: true
    models.metadata.field.Description:
      oneOf:
      - $ref: '#/components/schemas/models.metadata.field.description.Harmonized'
      - $ref: '#/components/schemas/models.metadata.field.description.Unharmonized'
      description: A description for a metadata field.
    models.metadata.field.description.Harmonized:
      type: object
      description: |-
        A harmonized metadata field description.

        Harmonized keys _must_ fit the regex pattern `^[a-z_]+$`.
      required:
      - harmonized
      - path
      - standard
      - url
      properties:
        harmonized:
          type: boolean
          description: |-
            Whether or not this field is harmonized across the ecosystem.

            This will always be set to `true`.
          default: true
        path:
          type: string
          description: |-
            A comma (`.`) delimited path to the field's location on the `metadata`
            objects returned by the various subject endpoints.
        standard:
          type: string
          description: |-
            The proper name of the standard to which this field is harmonized (defined
            by the documentation for the CCDI metadata fields).
        url:
          type: string
          description: |-
            A URL to the CCDI documentation where the definition of this harmonized
            field resides.
    models.metadata.field.description.Unharmonized:
      type: object
      description: |-
        An unharmonized metadata field description.

        Unharmonized keys may be any valid JSON string.
      required:
      - harmonized
      - path
      properties:
        harmonized:
          type: boolean
          description: |-
            Whether or not this field is harmonized across the ecosystem.

            This will always be set to `false`.
          default: false
        name:
          type: string
          description: |-
            A display name for this metadata field as _suggested_ by the server (this
            is not considered authoritative and can be ignored by the client if it so
            chooses). This is mainly to avoid naming collisions of common fields across
            servers.
          nullable: true
        description:
          type: string
          description: A plain-text description of what the field represents.
          nullable: true
        path:
          type: string
          description: |-
            A comma (`.`) delimited path to the field's location on the `metadata`
            objects returned by the various subject endpoints.
        standard:
          type: string
          description: |-
            If the field is considered harmonized across the federation ecosystem, the
            name of the standard to which the field is harmonized.

            If the field is _not_ harmonized across the federation ecosystem, then this
            should be [`None`].
          nullable: true
        url:
          type: string
          description: A url that describes more about the metadata field, if available.
          nullable: true
    models.sample.Identifier:
      type: object
      description: The primary name and namespace for a sample used within the source server.
      required:
      - namespace
      - name
      properties:
        namespace:
          type: string
          description: The namespace of the identifier.
          example: organization
        name:
          type: string
          description: The name of the identifier.
          example: SampleName001
    models.sample.Metadata:
      type: object
      description: Metadata associated with a sample.
      required:
      - disease_phase
      - tissue_type
      - tumor_classification
      properties:
        disease_phase:
          allOf:
          - $ref: '#/components/schemas/field.unowned.sample.DiseasePhase'
          nullable: true
        tissue_type:
          allOf:
          - $ref: '#/components/schemas/field.unowned.sample.TissueType'
          nullable: true
        tumor_classification:
          allOf:
          - $ref: '#/components/schemas/field.unowned.sample.TumorClassification'
          nullable: true
        unharmonized:
          $ref: '#/components/schemas/fields.Unharmonized'
    models.subject.Kind:
      type: string
      description: A kind of [`Subject`](super::Subject).
      enum:
      - Participant
      - Patient Derived Xenograft
      - Cell Line
      - Organoid
    models.subject.Metadata:
      type: object
      description: Metadata associated with a subject.
      required:
      - sex
      - race
      - ethnicity
      - identifiers
      properties:
        sex:
          allOf:
          - $ref: '#/components/schemas/field.unowned.subject.Sex'
          nullable: true
        race:
          type: array
          items:
            $ref: '#/components/schemas/field.unowned.subject.Race'
          description: The race(s) of the subject.
          nullable: true
        ethnicity:
          allOf:
          - $ref: '#/components/schemas/field.unowned.subject.Ethnicity'
          nullable: true
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/field.owned.subject.Identifier'
          description: |-
            The identifiers for the subject.

            Note that this list of identifiers *must* include the main identifier
            for the [`Subject`].
          nullable: true
        unharmonized:
          $ref: '#/components/schemas/fields.Unharmonized'
    responses.Errors:
      type: object
      description: A wrapper around one or more [errors](Kind).
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/responses.error.Kind'
          description: The errors within this response.
    responses.Sample:
      allOf:
      - $ref: '#/components/schemas/models.Sample'
      - type: object
      description: A response representing a single [`Sample`](models::Sample).
    responses.Samples:
      type: object
      description: |-
        A response representing multiple samples known about by the server.

        When no sort order is provided, samples **must** be ordered by the primary
        identifier. This means that, when comparing two identifiers:

        1. The `namespace` field should be sorted alphabetically. If there is a
        clear order, return that. Else, if the namespaces are equal,
        2. The `name` field should be sorted alphabetically. Since the `namespace`
        and the `name` should always uniquely apply to a single entity, this
        should always resolve to an ordering.

        Of course, if there is a provided sort order, use that instead.
      required:
      - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/models.Sample'
          description: The samples.
    responses.Subject:
      allOf:
      - $ref: '#/components/schemas/models.Subject'
      - type: object
      description: A response representing a single [`Subject`](models::Subject).
    responses.Subjects:
      type: object
      description: |-
        A response representing multiple subjects known about by the server.

        When no sort order is provided, subjects **must** be ordered by the primary
        identifier. This means that, when comparing two identifiers:

        1. The `namespace` field should be sorted alphabetically. If there is a
        clear order, return that. Else, if the namespaces are equal,
        2. The `name` field should be sorted alphabetically. Since the `namespace`
        and the `name` should always uniquely apply to a single entity, this
        should always resolve to an ordering.

        Of course, if there is a provided sort order, use that instead.
      required:
      - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/models.Subject'
          description: The subjects.
    responses.Summary:
      type: object
      description: A summary response for an entity endpoint.
      required:
      - counts
      properties:
        counts:
          $ref: '#/components/schemas/responses.summary.Counts'
    responses.by.count.Samples:
      type: object
      description: |-
        A response for grouping [`Sample`](ccdi_models::Sample)s by a metadata field
        and then summing the counts.
      required:
      - total
      - values
      properties:
        total:
          type: integer
          minimum: 0
        values:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
    responses.by.count.Subjects:
      type: object
      description: |-
        A response for grouping [`Subject`](ccdi_models::Subject)s by a metadata field
        and then summing the counts.
      required:
      - total
      - values
      properties:
        total:
          type: integer
          minimum: 0
        values:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
    responses.error.Kind:
      allOf:
      - oneOf:
        - type: object
          description: One or more invalid query or path parameters were provided.
          required:
          - reason
          - kind
          properties:
            parameters:
              type: array
              items:
                type: string
              description: |-
                If known, the parameters that are invalid. If not known, pass `None`
                to this field for a more general error message.
              nullable: true
            reason:
              type: string
              description: A plain-text reason describing why the parameters are invalid.
            kind:
              type: string
              enum:
              - InvalidParameters
          example:
            kind: InvalidParameters
            parameters:
            - id
            reason: The parameter was a non-integer value.
        - type: object
          description: An entity was not found.
          required:
          - entity
          - kind
          properties:
            entity:
              type: string
              description: The entity (or entities) that are not found.
            kind:
              type: string
              enum:
              - NotFound
          example:
            kind: NotFound
            entity: Samples
        - type: object
          description: A field name was not supported for the attempted operation.
          required:
          - field
          - reason
          - kind
          properties:
            field:
              type: string
              description: The field that is not supported.
            reason:
              type: string
              description: The reason that the field is not supported.
            kind:
              type: string
              enum:
              - UnsupportedField
          example:
            kind: UnsupportedField
            field: field
            reason: The field was not found in the metadata object.
        description: An inner type of a [Kind](super::Kind).
        discriminator:
          propertyName: kind
      - type: object
        required:
        - message
        properties:
          message:
            type: string
            description: |-
              A plain-text description of the error.

              This field is intended to be shown within a user interface or similar if
              needed. Please use this field if you intend to pass the error along to a
              user.
      description: A response indicating an error from the API.
    responses.metadata.FieldDescriptions:
      type: object
      description: A response for describing metadata fields for a subject.
      required:
      - fields
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/models.metadata.field.Description'
          description: Field descriptions.
    responses.summary.Counts:
      type: object
      description: Counts included in a summary endpoint.
      required:
      - total
      properties:
        total:
          type: integer
          minimum: 0
tags:
- name: Subject
  description: Subjects within the CCDI federated ecosystem.
- name: Sample
  description: Samples within the CCDI federated ecosystem.
- name: Metadata
  description: List and describe provided metadata fields.
- name: Info
  description: Information about the API implementation itself.
externalDocs:
  url: https://www.cancer.gov/research/areas/childhood/childhood-cancer-data-initiative
  description: Learn more about the Childhood Cancer Data Initiative
