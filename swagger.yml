openapi: 3.0.3
info:
  title: CCDI Pediatric Cancer Data Catalog
  description: "The CCDI Pediatric Cancer Data Catalog is an API that \nsupports the querying of federated pediatric cancer within the broader \ncommunity. The goal of the API is to support identification of pediatric cancer \nsamples of interest via a variety of query parameters. \n\n### Invalid Routes\n\nAll responses that do not match an endpoint below should return a Not Found \n(`404`) response. The body of this response should be the `responses.Errors` \nJSON object with one `responses.error.Kind` where the `Kind` matches the \n`InvalidRoute` error."
  contact:
    name: Childhood Cancer Data Initiative support email
    email: NCIChildhoodCancerDataInitiative@mail.nih.gov
  version: '0.4'
servers:
- url: https://ccdi.stjude.cloud/api/v0
  description: St. Jude Children's Research Hospital CCDI API server
- url: https://ccdifederation.pedscommons.org/api/v0
  description: Pediatric Cancer Data Commons CCDI API server
- url: https://ccdi.treehouse.gi.ucsc.edu/api/v0
  description: UCSC Treehouse CCDI API server
- url: https://ccdi.kidsfirstdrc.org/api/v0
  description: KidsFirst CCDI API server
paths:
  /subject:
    get:
      tags:
      - Subject
      summary: Gets the subjects known by this server.
      description: |-
        Gets the subjects known by this server.

        ### Pagination

        This endpoint supports pagination. Pagination is enabled by providing one of
        the pagination-related query parameters below.

        ### Filtering

        All harmonized (top-level) and unharmonized (nested under the
        `metadata.unharmonized` key) metadata fields are filterable. To achieve
        this, you can provide the field name as a [`String`]. Filtering follows the
        following rules:

        * For single-value metadata field, the subject is included in the results if
        its value _exactly_ matches the query string. Matches are case-sensitive.
        * For multiple-value metadata fields, the subject is included in the results
        if any of its values for the field _exactly_ match the query string (a
        logical OR [`||`]). Matches are case-sensitive.
        * When the metadata field is `null` (in the case of singlular or
        multiple-valued metadata fields) or empty, the subject is not included.
        * When multiple fields are provided as filters, a logical AND (`&&`) strings
        together the predicates. In other words, all filters must match for a
        subject to be returned. Note that this means that servers do not natively
        support logical OR (`||`) across multiple fields: that must be done by
        calling this endpoint with each of your desired queries and performing a
        set union of those subjects out of band.

        ### Ordering

        This endpoint has default ordering requirementsâ€”those details are documented
        in the `responses::Subjects` schema.
      operationId: subject_index
      parameters:
      - name: sex
        in: query
        description: Matches any subject where the `sex` field matches the string provided.
        required: false
        schema:
          type: string
      - name: race
        in: query
        description: |-
          Matches any subject where any member of the `race` fieldmatches
          the string provided.

          **Note:** a logical OR (`||`) is performed across the values when
          determining whether the subject should be included in the results.
        required: false
        schema:
          type: string
      - name: ethnicity
        in: query
        description: matches any subject where the `ethnicity` field matches the string provided.
        required: false
        schema:
          type: string
      - name: identifiers
        in: query
        description: |-
          Matches any subject where any member of the `identifiers` fieldmatches
          the string provided.

          **Note:** a logical OR (`||`) is performed across the values when
          determining whether the subject should be included in the results.
        required: false
        schema:
          type: string
      - name: metadata.unharmonized.<field>
        in: query
        description: |-
          All unharmonized fields should be filterable in the same manner as harmonized fields:

          * Filtering on a singular field should include the `Subject` in the results if the query exactly matches the value of that field for the `Subject` (case-sensitive).
          * Filtering on field with multiple values should include the `Subject` in the results if the query exactly matches any of the values of the field for that `Subject` (case-sensitive).
          * Unlike harmonized fields, unharmonized fields must be prefixed with `metadata.unharmonized`.

          **Note:** this query parameter is intended to be symbolic of any unharmonized field. Because of limitations within Swagger UI, it will show up as a query parameter that can be optionally be submitted as part of a request within Swagger UI. Please keep in mind that the literal query parameter `?metadata.unharmonized.<field>=value` is not supported, so attempting to use it within Swagger UI will not work!
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          The page to retrieve.

          This is a 1-based index of a page within a page set. The value of `page`
          **must** default to `1` when pagination is enabled but this parameter is
          not provided. Pagination is enabled if this parameter is provided to the
          endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      - name: per_page
        in: query
        description: |-
          The number of results per page.

          Each server can select its own default value for `per_page` if
          pagination is enabled but this parameter is not provided. A default
          value of `100` is recommended if all values are equally reasonable.
          Pagination is enabled if this parameter is provided to the endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successful operation.
          headers:
            link:
              schema:
                type: string
              description: "Links to URLs that may be of interest when paging through paginated responses. This header contains two or more links of interest. The format of the field is as follows: \n\n`Link: <URL>; rel=\"REL\"` \n### Relationships\n\nIn the format above, `URL` represents a valid URL for the link of interest and `REL` is one of four values: \n- `first` (_Required_). A link to the first page in the results (can be the same as `last` if there is only one page).\n- `last` (_Required_). A link to the first page in the results (can be the same as `first` if there is only one page).\n- `next` (_Optional_). A link to the next page (if it exists).\n- `prev` (_Optional_). A link to the previous page (if it exists).\n\n### Requirements\n\n- This header is required to exist when pagination is enabled.\n- It is also required _not_ to exist when pagination is not enabled.\n- When the header is present, this header must provide links for at least the `first` and `last` rels.\n - When the header is present, the `prev` and `next` links must exist only (a) when there are multiple pages in the result page set and (b) when the current page is not the first or last page, respectively.\n- This list of links is unordered.\n\n ### Notes\n\n- HTTP 1.1 and HTTP 2.0 dictate that response headers are case insensitive. Though not required, we recommend an all lowercase name of `link` for this response header."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Subjects'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: UnshareableData
                  entity: Subjects
                  reason: Our agreement with data providers prohibits us from sharing line-level data.
                  message: 'Unable to share data for subjects: our agreement with data providers prohibits us from sharing line-level data.'
        '422':
          description: Invalid query or path parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: InvalidParameters
                  parameters:
                  - page
                  - per_page
                  reason: Unable to calculate offset.
                  message: 'Invalid value for parameters ''page'' and ''per_page'': unable to calculate offset.'
  /subject/{namespace}/{name}:
    get:
      tags:
      - Subject
      summary: Gets the subject matching the provided id (if the subject exists).
      description: Gets the subject matching the provided id (if the subject exists).
      operationId: subject_show
      parameters:
      - name: namespace
        in: path
        description: The namespace portion of the subject identifier.
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: The name portion of the subject identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Subject'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Subjects
                  message: Subjects not found.
  /subject/by/{field}/count:
    get:
      tags:
      - Subject
      summary: Groups the subjects by the specified metadata field and returns counts.
      description: Groups the subjects by the specified metadata field and returns counts.
      operationId: subjects_by_count
      parameters:
      - name: field
        in: path
        description: The field to group by and count.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.by.count.Subjects'
        '422':
          description: Unsupported field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: UnsupportedField
                  field: handedness
                  reason: This field is not present for subjects.
                  message: 'Field ''handedness'' is not supported: this field is not present for subjects.'
  /subject/summary:
    get:
      tags:
      - Subject
      summary: Reports summary information for the subjects known by this server.
      description: Reports summary information for the subjects known by this server.
      operationId: subject_summary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Summary'
  /sample:
    get:
      tags:
      - Sample
      summary: Gets the samples known by this server.
      description: |-
        Gets the samples known by this server.

        ### Pagination

        This endpoint supports pagination. Pagination is enabled by providing one of
        the pagination-related query parameters below.

        ### Filtering

        All harmonized (top-level) and unharmonized (nested under the
        `metadata.unharmonized` key) metadata fields are filterable. To achieve
        this, you can provide the field name as a [`String`]. Filtering follows the
        following rules:

        * For single-value metadata field, the sample is included in the results if
        its value _exactly_ matches the query string. Matches are case-sensitive.
        * For multiple-value metadata fields, the sample is included in the results
        if any of its values for the field _exactly_ match the query string (a
        logical OR [`||`]). Matches are case-sensitive.
        * When the metadata field is `null` (in the case of singlular or
        multiple-valued metadata fields) or empty, the sample is not included.
        * When multiple fields are provided as filters, a logical AND (`&&`) strings
        together the predicates. In other words, all filters must match for a
        sample to be returned. Note that this means that servers do not natively
        support logical OR (`||`) across multiple fields: that must be done by
        calling this endpoint with each of your desired queries and performing a
        set union of those samples out of band.

        ### Ordering

        This endpoint has default ordering requirementsâ€”those details are documented
        in the `responses::Samples` schema.
      operationId: sample_index
      parameters:
      - name: disease_phase
        in: query
        description: |-
          Matches any subject where the `disease_phase` field matches the string
          provided.
        required: false
        schema:
          type: string
      - name: tissue_type
        in: query
        description: |-
          Matches any subject where the `tissue_type` field matches the string
          provided.
        required: false
        schema:
          type: string
      - name: tumor_classification
        in: query
        description: |-
          Matches any subject where the `tumor_classification` field matches the
          string provided.
        required: false
        schema:
          type: string
      - name: metadata.unharmonized.<field>
        in: query
        description: |-
          All unharmonized fields should be filterable in the same manner as harmonized fields:

          * Filtering on a singular field should include the `Sample` in the results if the query exactly matches the value of that field for the `Sample` (case-sensitive).
          * Filtering on field with multiple values should include the `Sample` in the results if the query exactly matches any of the values of the field for that `Sample` (case-sensitive).
          * Unlike harmonized fields, unharmonized fields must be prefixed with `metadata.unharmonized`.

          **Note:** this query parameter is intended to be symbolic of any unharmonized field. Because of limitations within Swagger UI, it will show up as a query parameter that can be optionally be submitted as part of a request within Swagger UI. Please keep in mind that the literal query parameter `?metadata.unharmonized.<field>=value` is not supported, so attempting to use it within Swagger UI will not work!
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: |-
          The page to retrieve.

          This is a 1-based index of a page within a page set. The value of `page`
          **must** default to `1` when pagination is enabled but this parameter is
          not provided. Pagination is enabled if this parameter is provided to the
          endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      - name: per_page
        in: query
        description: |-
          The number of results per page.

          Each server can select its own default value for `per_page` if
          pagination is enabled but this parameter is not provided. A default
          value of `100` is recommended if all values are equally reasonable.
          Pagination is enabled if this parameter is provided to the endpoint.
        required: false
        schema:
          type: integer
          minimum: 0
      responses:
        '200':
          description: Successful operation.
          headers:
            link:
              schema:
                type: string
              description: "Links to URLs that may be of interest when paging through paginated responses. This header contains two or more links of interest. The format of the field is as follows: \n\n`Link: <URL>; rel=\"REL\"` \n### Relationships\n\nIn the format above, `URL` represents a valid URL for the link of interest and `REL` is one of four values: \n- `first` (_Required_). A link to the first page in the results (can be the same as `last` if there is only one page).\n- `last` (_Required_). A link to the first page in the results (can be the same as `first` if there is only one page).\n- `next` (_Optional_). A link to the next page (if it exists).\n- `prev` (_Optional_). A link to the previous page (if it exists).\n\n### Requirements\n\n- This header is required to exist when pagination is enabled.\n- It is also required _not_ to exist when pagination is not enabled.\n- When the header is present, this header must provide links for at least the `first` and `last` rels.\n - When the header is present, the `prev` and `next` links must exist only (a) when there are multiple pages in the result page set and (b) when the current page is not the first or last page, respectively.\n- This list of links is unordered.\n\n ### Notes\n\n- HTTP 1.1 and HTTP 2.0 dictate that response headers are case insensitive. Though not required, we recommend an all lowercase name of `link` for this response header."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Samples'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: UnshareableData
                  entity: Samples
                  reason: Our agreement with data providers prohibits us from sharing line-level data.
                  message: 'Unable to share data for samples: our agreement with data providers prohibits us from sharing line-level data.'
        '422':
          description: Invalid query or path parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: InvalidParameters
                  parameters:
                  - page
                  - per_page
                  reason: Unable to calculate offset.
                  message: 'Invalid value for parameters ''page'' and ''per_page'': unable to calculate offset.'
  /sample/{namespace}/{name}:
    get:
      tags:
      - Sample
      summary: Gets the sample matching the provided name (if the sample exists).
      description: Gets the sample matching the provided name (if the sample exists).
      operationId: sample_show
      parameters:
      - name: namespace
        in: path
        description: The namespace portion of the sample identifier.
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: The name portion of the sample identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Sample'
        '404':
          description: |-
            Not found.
            Servers that cannot provide line-level data should use this response rather than Forbidden (403), as there is no level of authorization that would allow one to access the information included in the API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Sample with namespace 'foo' and name 'bar'
                  message: Sample with namespace 'foo' and name 'bar' not found.
  /sample/by/{field}/count:
    get:
      tags:
      - Sample
      summary: Groups the samples by the specified metadata field and returns counts.
      description: Groups the samples by the specified metadata field and returns counts.
      operationId: samples_by_count
      parameters:
      - name: field
        in: path
        description: The field to group by and count.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.by.count.Samples'
        '422':
          description: Unsupported field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: UnsupportedField
                  field: handedness
                  reason: This field is not present for samples.
                  message: 'Field ''handedness'' is not supported: this field is not present for samples.'
  /sample/summary:
    get:
      tags:
      - Sample
      summary: Reports summary information for the samples known by this server.
      description: Reports summary information for the samples known by this server.
      operationId: sample_summary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Summary'
  /metadata/fields/subject:
    get:
      tags:
      - Metadata
      summary: Gets the metadata fields for subjects that are supported by this server.
      description: Gets the metadata fields for subjects that are supported by this server.
      operationId: metadata_fields_subject
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.metadata.FieldDescriptions'
  /metadata/fields/sample:
    get:
      tags:
      - Metadata
      summary: Gets the metadata fields for samples that are supported by this server.
      description: Gets the metadata fields for samples that are supported by this server.
      operationId: metadata_fields_sample
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.metadata.FieldDescriptions'
  /namespace:
    get:
      tags:
      - Namespace
      summary: Gets the namespaces known by this server.
      description: Gets the namespaces known by this server.
      operationId: namespace_index
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Namespaces'
  /namespace/{name}:
    get:
      tags:
      - Namespace
      summary: Gets the namespace matching the provided name (if it exists).
      description: Gets the namespace matching the provided name (if it exists).
      operationId: namespace_show
      parameters:
      - name: name
        in: path
        description: The name of the namespace.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Namespace'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Errors'
              example:
                errors:
                - kind: NotFound
                  entity: Namespaces
                  message: Namespaces not found.
  /info:
    get:
      tags:
      - Info
      summary: Gets the info for this server.
      description: Gets the info for this server.
      operationId: info_index
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responses.Information'
components:
  schemas:
    cde.v1.sample.DiseasePhase:
      type: string
      description: |-
        **`caDSR CDE 12217251 v1.00`**

        This metadata element is defined by the caDSR as "The stage or period of an
        individual's treatment process during which relevant observations were
        recorded.".

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=12217251%20and%20ver_nr=1>
      enum:
      - Post-Mortem
      - Not Reported
      - Unknown
      - Initial Diagnosis
      - Progression
      - Refractory
      - Relapse
      - Relapse/Progression
    cde.v1.sample.TumorClassification:
      type: string
      description: |-
        **`caDSR CDE 12922545 v1.00`**

        This metadata element is defined by the caDSR as "The classification of a
        tumor based primarily on histopathological characteristics.".

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=12922545%20and%20ver_nr=1>
      enum:
      - Metastatic
      - Not Reported
      - Primary
      - Regional
      - Unknown
    cde.v1.subject.Identifier:
      type: object
      description: |-
        **`caDSR CDE 6380049 v1.00`**

        This metadata element is defined by the caDSR as "A unique subject
        identifier within a site and a study.". No permissible values are defined
        for this CDE.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=6380049%20and%20ver_nr=1>
      required:
      - namespace
      - name
      properties:
        namespace:
          type: string
          description: The namespace of the identifier.
          example: organization
        name:
          type: string
          description: The name of the identifier.
          example: SubjectName001
    cde.v1.subject.Race:
      type: string
      description: |-
        **`caDSR CDE 2192199 v1.00`**

        This metadata element is defined by the caDSR as "The text for reporting
        information about race based on the Office of Management and Budget (OMB)
        categories.". Upon examination of the large number of projects using the
        term, it appears to be the preferred term for the general concept of race.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=2192199%20and%20ver_nr=1>
      enum:
      - Not allowed to collect
      - Native Hawaiian or other Pacific Islander
      - Not Reported
      - Unknown
      - American Indian or Alaska Native
      - Asian
      - Black or African American
      - White
    cde.v1.subject.Sex:
      type: string
      description: |-
        **`caDSR CDE 6343385 v1.00`**

        This metadata element is defined by the caDSR as "Sex of the subject as
        determined by the investigator." In particular, this field does not dictate
        the time period: whether it represents sex at birth, sex at sample
        collection, or any other determined time point. Further, the descriptions
        for F and M suggest that this term can represent either biological sex,
        cultural gender roles, or both. Thus, this field cannot be assumed to
        strictly represent biological sex.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=6343385%20and%20ver_nr=1>
      enum:
      - U
      - F
      - M
      - UNDIFFERENTIATED
    cde.v2.sample.TissueType:
      type: string
      description: |-
        **`caDSR CDE 5432687 v2.00`**

        This metadata element is defined by the caDSR as "Text term that represents
        a description of the kind of tissue collected with respect to disease status
        or proximity to tumor tissue."

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=5432687%20and%20ver_nr=2>
      enum:
      - Not Reported
      - Abnormal
      - Normal
      - Peritumoral
      - Tumor
      - Non-neoplastic
      - Unavailable
      - Unknown
      - Unspecified
    cde.v2.subject.Ethnicity:
      type: string
      description: |-
        **`caDSR CDE 2192217 v2.00`**

        This metadata element is defined by the caDSR as "The text for reporting
        information about ethnicity based on the Office of Management and Budget
        (OMB) categories." Upon examination of the large number of projects using
        the term, it appears to be the preferred term for the general concept of
        ethnicity.

        Link:
        <https://cadsr.cancer.gov/onedata/dmdirect/NIH/NCI/CO/CDEDD?filter=CDEDD.ITEM_ID=2192217%20and%20ver_nr=2>
      enum:
      - Not allowed to collect
      - Hispanic or Latino
      - Not Hispanic or Latino
      - Unknown
      - Not reported
    field.UnharmonizedField:
      oneOf:
      - $ref: '#/components/schemas/field.owned.Field'
      - $ref: '#/components/schemas/field.unowned.Field'
      description: A metadata field.
    field.owned.Field:
      type: object
      required:
      - value
      properties:
        value:
          description: The value of the metadata field.
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
        owned:
          type: boolean
          description: Whether or not the field is owned by the source server.
    field.owned.subject.Identifier:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.subject.Identifier'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
        owned:
          type: boolean
          description: Whether or not the field is owned by the source server.
    field.unowned.Field:
      type: object
      required:
      - value
      properties:
        value:
          description: The value of the metadata field.
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.sample.DiseasePhase:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.sample.DiseasePhase'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.sample.TissueType:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v2.sample.TissueType'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.sample.TumorClassification:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.sample.TumorClassification'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.subject.Ethnicity:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v2.subject.Ethnicity'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.subject.Race:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.subject.Race'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    field.unowned.subject.Sex:
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/cde.v1.subject.Sex'
        ancestors:
          type: array
          items:
            type: string
          description: |-
            The ancestors from which this field was derived.

            Ancestors should be provided as period (`.`) delimited paths
            from the `metadata` key in the subject response object.
        comment:
          type: string
          description: A free-text comment field.
    fields.Unharmonized:
      allOf:
      - type: object
        description: The inner [`IndexMap`].
        additionalProperties:
          $ref: '#/components/schemas/field.UnharmonizedField'
      - type: object
      description: |-
        A map of unharmonized metadata fields.

        Unharmonized keys may be any valid JSON string.
    models.Namespace:
      type: object
      description: A response for describing metadata fields for a subject.
      required:
      - name
      - owner
      - contact_email
      - description
      properties:
        name:
          $ref: '#/components/schemas/models.namespace.Name'
        owner:
          type: string
          description: |-
            A free-text string describing the owner of the namespace.

            This field is intended to be the proper name of the organization that
            mints identifiers within a given namespace. That said, we have
            intentionally not required this restriction, as there may be exceptions
            to this guideline. We recommend that you use an organization name here
            if you can, but you may put whatever value is appropriate to describe
            the owner of the namespace.

            It is recommended that you use title case for this field, though that is
            not strictly required.

            **Note:** this field is asserted by the source server, but it is not
            guaranteed to be authoritative across the federation (due to the
            decentralized nature of namespace allocation).
          example: Example Organization
        contact_email:
          type: string
          description: |-
            A support email address for entities contained within the namespace.

            This field is required to be a valid email address (both in format and
            in terms of the email address being actively monitored).
          example: support@example.com
        description:
          $ref: '#/components/schemas/models.namespace.Description'
    models.Sample:
      type: object
      description: |-
        A sample.

        **Note:** the `subject` identifier **must** match a
        [`Subject`](super::Subject) that both (a) is listed in the
        [`Subject`](super::Subject) index endpoint and (b) is able to be shown with
        the [`Subject`](super::Subject) show endpoint.
      required:
      - id
      - subject
      properties:
        id:
          $ref: '#/components/schemas/models.sample.Identifier'
        subject:
          $ref: '#/components/schemas/models.subject.Identifier'
        metadata:
          allOf:
          - $ref: '#/components/schemas/models.sample.Metadata'
          nullable: true
    models.Subject:
      type: object
      description: A subject.
      required:
      - id
      - name
      - kind
      properties:
        id:
          $ref: '#/components/schemas/models.subject.Identifier'
        name:
          type: string
          description: |-
            The primary name for a subject used within the source server.

            Note that this field is not namespaced like an `identifier` is, and,
            instead, is intended to represent a colloquial or display name for the
            sample (without indicating the scope of the name).
          example: SubjectName001
        kind:
          $ref: '#/components/schemas/models.subject.Kind'
        metadata:
          allOf:
          - $ref: '#/components/schemas/models.subject.Metadata'
          nullable: true
    models.metadata.field.Description:
      oneOf:
      - $ref: '#/components/schemas/models.metadata.field.description.Harmonized'
      - $ref: '#/components/schemas/models.metadata.field.description.Unharmonized'
      description: A description for a metadata field.
    models.metadata.field.description.Harmonized:
      type: object
      description: |-
        A harmonized metadata field description.

        Harmonized keys _must_ fit the regex pattern `^[a-z_]+$`.
      required:
      - harmonized
      - path
      - standard
      - url
      properties:
        harmonized:
          type: boolean
          description: |-
            Whether or not this field is harmonized across the ecosystem.

            This will always be set to `true`.
          default: true
        path:
          type: string
          description: |-
            A comma (`.`) delimited path to the field's location on the `metadata`
            objects returned by the various subject endpoints.
        standard:
          type: string
          description: |-
            The proper name of the standard to which this field is harmonized (defined
            by the documentation for the CCDI metadata fields).
        url:
          type: string
          description: |-
            A URL to the CCDI documentation where the definition of this harmonized
            field resides.
    models.metadata.field.description.Unharmonized:
      type: object
      description: |-
        An unharmonized metadata field description.

        Unharmonized keys may be any valid JSON string.
      required:
      - harmonized
      - path
      properties:
        harmonized:
          type: boolean
          description: |-
            Whether or not this field is harmonized across the ecosystem.

            This will always be set to `false`.
          default: false
        name:
          type: string
          description: |-
            A display name for this metadata field as _suggested_ by the server (this
            is not considered authoritative and can be ignored by the client if it so
            chooses). This is mainly to avoid naming collisions of common fields across
            servers.
          nullable: true
        description:
          type: string
          description: A plain-text description of what the field represents.
          nullable: true
        path:
          type: string
          description: |-
            A comma (`.`) delimited path to the field's location on the `metadata`
            objects returned by the various subject endpoints.
        standard:
          type: string
          description: |-
            If the field is considered harmonized across the federation ecosystem, the
            name of the standard to which the field is harmonized.

            If the field is _not_ harmonized across the federation ecosystem, then this
            should be [`None`].
          nullable: true
        url:
          type: string
          description: A url that describes more about the metadata field, if available.
          nullable: true
    models.namespace.Description:
      type: string
      description: |-
        A description of a namespace.

        This description cannot exceed 2048 characters.
      example: A namespace owned by Example Organization.
    models.namespace.Name:
      type: string
      description: |-
        The name of a namespace.

        The name **must** conform to
        [`kebab-casing`](https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case),
        matching the pattern `^[a-z0-9-]+$`. Any name that does not match this
        pattern should be considered invalid by clients.

        **Note:** this field is asserted by the source server, but it is not
        guaranteed to be authoritative across the federation (due to the
        decentralized nature of namespace allocation).
    models.sample.Identifier:
      type: object
      description: The primary name and namespace for a sample used within the source server.
      required:
      - namespace
      - name
      properties:
        namespace:
          type: string
          description: The namespace of the identifier.
          example: organization
        name:
          type: string
          description: The name of the identifier.
          example: SampleName001
    models.sample.Metadata:
      type: object
      description: Metadata associated with a sample.
      required:
      - disease_phase
      - tissue_type
      - tumor_classification
      properties:
        disease_phase:
          allOf:
          - $ref: '#/components/schemas/field.unowned.sample.DiseasePhase'
          nullable: true
        tissue_type:
          allOf:
          - $ref: '#/components/schemas/field.unowned.sample.TissueType'
          nullable: true
        tumor_classification:
          allOf:
          - $ref: '#/components/schemas/field.unowned.sample.TumorClassification'
          nullable: true
        unharmonized:
          $ref: '#/components/schemas/fields.Unharmonized'
    models.subject.Identifier:
      $ref: '#/components/schemas/cde.v1.subject.Identifier'
    models.subject.Kind:
      type: string
      description: A kind of [`Subject`](super::Subject).
      enum:
      - Participant
      - Patient Derived Xenograft
      - Cell Line
      - Organoid
    models.subject.Metadata:
      type: object
      description: Metadata associated with a subject.
      required:
      - sex
      - race
      - ethnicity
      - identifiers
      properties:
        sex:
          allOf:
          - $ref: '#/components/schemas/field.unowned.subject.Sex'
          nullable: true
        race:
          type: array
          items:
            $ref: '#/components/schemas/field.unowned.subject.Race'
          description: The race(s) of the subject.
          nullable: true
        ethnicity:
          allOf:
          - $ref: '#/components/schemas/field.unowned.subject.Ethnicity'
          nullable: true
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/field.owned.subject.Identifier'
          description: |-
            The identifiers for the subject.

            Note that this list of identifiers *must* include the main identifier
            for the [`Subject`].
          nullable: true
        unharmonized:
          $ref: '#/components/schemas/fields.Unharmonized'
    responses.Errors:
      type: object
      description: A wrapper around one or more [errors](Kind).
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/responses.error.Kind'
          description: The errors within this response.
    responses.Information:
      type: object
      description: A response for information regarding the server.
      required:
      - server
      - api
      - data
      properties:
        server:
          $ref: '#/components/schemas/responses.info.server.Information'
        api:
          $ref: '#/components/schemas/responses.info.api.Information'
        data:
          $ref: '#/components/schemas/responses.info.data.Information'
    responses.Namespace:
      $ref: '#/components/schemas/models.Namespace'
    responses.Namespaces:
      type: array
      items:
        $ref: '#/components/schemas/models.Namespace'
      description: A response for describing namespaces.
    responses.Sample:
      allOf:
      - $ref: '#/components/schemas/models.Sample'
      - type: object
      description: A response representing a single [`Sample`](models::Sample).
    responses.Samples:
      type: object
      description: |-
        A response representing multiple samples known about by the server.

        When no sort order is provided, samples **must** be ordered by the primary
        identifier. This means that, when comparing two identifiers:

        1. The `namespace` field should be sorted alphabetically. If there is a
        clear order, return that. Else, if the namespaces are equal,
        2. The `name` field should be sorted alphabetically. Since the `namespace`
        and the `name` should always uniquely apply to a single entity, this
        should always resolve to an ordering.

        Of course, if there is a provided sort order, use that instead.
      required:
      - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/models.Sample'
          description: The samples.
    responses.Subject:
      allOf:
      - $ref: '#/components/schemas/models.Subject'
      - type: object
      description: A response representing a single [`Subject`](models::Subject).
    responses.Subjects:
      type: object
      description: |-
        A response representing multiple subjects known about by the server.

        When no sort order is provided, subjects **must** be ordered by the primary
        identifier. This means that, when comparing two identifiers:

        1. The `namespace` field should be sorted alphabetically. If there is a
        clear order, return that. Else, if the namespaces are equal,
        2. The `name` field should be sorted alphabetically. Since the `namespace`
        and the `name` should always uniquely apply to a single entity, this
        should always resolve to an ordering.

        Of course, if there is a provided sort order, use that instead.
      required:
      - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/models.Subject'
          description: The subjects.
    responses.Summary:
      type: object
      description: A summary response for an entity endpoint.
      required:
      - counts
      properties:
        counts:
          $ref: '#/components/schemas/responses.summary.Counts'
    responses.by.count.Samples:
      type: object
      description: |-
        A response for grouping [`Sample`](ccdi_models::Sample)s by a metadata field
        and then summing the counts.
      required:
      - total
      - values
      properties:
        total:
          type: integer
          minimum: 0
        values:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
    responses.by.count.Subjects:
      type: object
      description: |-
        A response for grouping [`Subject`](ccdi_models::Subject)s by a metadata field
        and then summing the counts.
      required:
      - total
      - values
      properties:
        total:
          type: integer
          minimum: 0
        values:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
    responses.error.Kind:
      allOf:
      - oneOf:
        - type: object
          description: |-
            Attempted to access an invalid route.

            Also includes all routes for which the path exists, but the HTTP method
            is not supported for that path.
          required:
          - method
          - route
          - kind
          properties:
            method:
              type: string
              description: The HTTP method that was used in the request.
            route:
              type: string
              description: The route that was requested.
            kind:
              type: string
              enum:
              - InvalidRoute
          example:
            kind: InvalidRoute
            method: GET
            route: /foobar
        - type: object
          description: One or more invalid query or path parameters were provided.
          required:
          - reason
          - kind
          properties:
            parameters:
              type: array
              items:
                type: string
              description: |-
                If known, the parameters that are invalid. If not known, pass `None`
                to this field for a more general error message.
              nullable: true
            reason:
              type: string
              description: A plain-text reason describing why the parameters are invalid.
            kind:
              type: string
              enum:
              - InvalidParameters
          example:
            kind: InvalidParameters
            parameters:
            - id
            reason: The parameter was a non-integer value.
        - type: object
          description: An entity was not found.
          required:
          - entity
          - kind
          properties:
            entity:
              type: string
              description: The entity (or entities) that are not found.
            kind:
              type: string
              enum:
              - NotFound
          example:
            kind: NotFound
            entity: Samples
        - type: object
          description: Line-level data cannot be shared for the specified entity.
          required:
          - entity
          - reason
          - kind
          properties:
            entity:
              type: string
              description: The entity (or entities) where data cannot be shared.
            reason:
              type: string
              description: The reason that the line-level data cannot be shared.
            kind:
              type: string
              enum:
              - UnshareableData
          example:
            kind: UnshareableData
            entity: Sample
            reason: Our agreement with data providers prohibits us from sharing line-level data.
        - type: object
          description: A field name was not supported for the attempted operation.
          required:
          - field
          - reason
          - kind
          properties:
            field:
              type: string
              description: The field that is not supported.
            reason:
              type: string
              description: The reason that the field is not supported.
            kind:
              type: string
              enum:
              - UnsupportedField
          example:
            kind: UnsupportedField
            field: field
            reason: The field was not found in the metadata object.
        description: An inner type of a [Kind](super::Kind).
        discriminator:
          propertyName: kind
      - type: object
        required:
        - message
        properties:
          message:
            type: string
            description: |-
              A plain-text description of the error.

              This field is intended to be shown within a user interface or similar if
              needed. Please use this field if you intend to pass the error along to a
              user.
      description: A response indicating an error from the API.
    responses.info.api.Information:
      type: object
      description: Information that is specific to the API that the server implements.
      required:
      - api_version
      - documentation_url
      properties:
        api_version:
          type: string
          description: The version of the API that this server supports.
          example: v0.3
        documentation_url:
          type: string
          description: |-
            A URL pointing to the latest version of the Swagger documentation.

            Note that, at times, the latest version of the Swagger documentation may
            not be in sync with the version of the API deployed for this server. The
            intention of this field is not to link to a Swagger specification that
            strictly matches this particular server, but rather, to point users to
            where the specification is developed and hosted.
          default: https://cbiit.github.io/ccdi-federation-api/
    responses.info.data.Information:
      type: object
      description: Information that is specific to the API that the server implements.
      required:
      - version
      - last_updated
      - wiki_url
      properties:
        version:
          $ref: '#/components/schemas/responses.info.data.Version'
        last_updated:
          type: string
          format: date-time
          description: |-
            The ISO 8601 formatted date and time when the data was last updated.

            This represents the last _update_ time. In contrast to the
            `data_version` field, this field is updated whenever a data update is
            performed irrespective of whether there were actually changes in the
            data.
        wiki_url:
          type: string
          description: |-
            A URL pointing to the wiki.

            The intention of this field is to make users aware that we maintain a
            federation-wide wiki that describes the data elements in detail.
          default: https://github.com/CBIIT/ccdi-federation-api/wiki
        documentation_url:
          type: string
          description: |-
            If available, a link pointing to where users can learn more about the
            data contained within this particular server.

            This is intended to be a server-specification documentation link, not
            any link that is developed by the federation.
          nullable: true
    responses.info.data.Version:
      allOf:
      - $ref: '#/components/schemas/responses.info.data.version.About'
      - type: object
        required:
        - version
        properties:
          version:
            type: integer
            description: |-
              The value of the version.

              This field represents a free-text field where data is arbitrarily
              versioned by the source server. Any versioning scheme is permissible.
            example: 1
            minimum: 1
      description: The version of data published within this source server.
    responses.info.data.version.About:
      oneOf:
      - type: object
        required:
        - about
        properties:
          about:
            type: string
            description: |-
              A free-text description of the data version included with the response
              from the source server. This field is interpreted as Markdown (as
              defined by the [CommonMark](https://commonmark.org/) specification).
      - type: object
        required:
        - about_url
        properties:
          about_url:
            type: string
            description: |-
              A URL where one can learn more about the data versioning for this source
              server.
      description: A description of how data is versioning within the source server.
    responses.info.server.Information:
      type: object
      description: Information that is specific to the server itself.
      required:
      - owner
      - contact_email
      properties:
        name:
          type: string
          description: |-
            The name of this server (if it has one).

            This is a free-text field describing the name of this server, if it has
            one. The intention is to be able to describe the proper name of the
            application.
          example: Example Server
          nullable: true
        version:
          type: string
          description: |-
            The version of this server (if it has one).

            Though there is explicitly no versioning dictated by the specification,
            we recommend [Semantic Versioning v2.0](https://semver.org/) in the
            absence of better options to align with the scheme used by the API. Note
            that using the same versioning scheme does not mean that the version of
            your server is recommended to be the same version as the API.
          example: v1.22
          nullable: true
        owner:
          type: string
          description: |-
            A free-text string describing the owner of the namespace.

            This field is intended to be the proper name of the organization that
            owns and operates the server. That said, we have intentionally not
            required this restriction, as there may be exceptions to this guideline.
            We recommend that you use an organization name here if you can, but you
            may put whatever value is appropriate to describe the owner of the
            server.

            It is recommended that you use title case for this field, though that is
            not strictly required.
          example: Example Organization
        contact_email:
          type: string
          description: |-
            A support email address for the server.

            This field is required to be a valid email address (both in format and
            in terms of the email address being actively monitored).
          example: support@example.com
        about_url:
          type: string
          description: |-
            If desired, a link to a page intended to be consumed by a web browser
            that describes more about the owner. This can be a link to your
            organization's main web page or a link to a webpage describing the
            project.
          example: https://example.com
          nullable: true
        repository_url:
          type: string
          description: |-
            If your code base is open source and you want to advertise that, a link
            to the repository where the code is stored.
          example: https://github.com/CBIIT/ccdi-federation/api
          nullable: true
        issues_url:
          type: string
          description: If available, a URL where users can report issues.
          example: https://github.com/CBIIT/ccdi-federation-api/issues
          nullable: true
    responses.metadata.FieldDescriptions:
      type: object
      description: A response for describing metadata fields for a subject.
      required:
      - fields
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/models.metadata.field.Description'
          description: Field descriptions.
    responses.summary.Counts:
      type: object
      description: Counts included in a summary endpoint.
      required:
      - total
      properties:
        total:
          type: integer
          minimum: 0
tags:
- name: Subject
  description: Subjects within the CCDI federated ecosystem.
- name: Sample
  description: Samples within the CCDI federated ecosystem.
- name: Metadata
  description: List and describe provided metadata fields.
- name: Namespace
  description: List and describe namespaces supported by this server.
- name: Info
  description: Information about the API implementation itself.
externalDocs:
  url: https://www.cancer.gov/research/areas/childhood/childhood-cancer-data-initiative
  description: Learn more about the Childhood Cancer Data Initiative
